//
//  Day22.swift
//  AdventOfCode2024
//
//  Created by Marc-Antoine MalÃ©part on 2024-12-22.
//

import Foundation
import ArgumentParser
import AdventOfCodeUtilities
import Collections

struct Day22: DayCommand {
    static var configuration: CommandConfiguration {
        CommandConfiguration(
            commandName: "day22",
            abstract: "Solve day 22 puzzle"
        )
    }
    
    @Argument(help: "Puzzle input path")
    var puzzleInputPath: String
    
    func run() throws {
        let secretNumbers = try readLines().compactMap(Int.init)
        
        let clock = ContinuousClock()
        printTitle("Part 1", level: .title1)
        let (part1Duration, sumOfTwoThousandthNumbers) = clock.measure {
            part1(secretNumbers)
        }
        print("Sum of the 2000th secret number generated by each buyer:", sumOfTwoThousandthNumbers)
        print("Elapsed time", part1Duration, terminator: "\n\n")
        
        printTitle("Part 2", level: .title1)
        let (part2Duration, maximumBananas) = clock.measure {
            part2(secretNumbers)
        }
        print("Most bananas we can get:", maximumBananas)
        print("Elapsed time", part2Duration)
    }
    
    func part1(_ secretNumbers: [Int]) -> Int {
        secretNumbers.reduce(into: 0) { sum, initial in
            let twoThousandthSecretNumber = nthSecretNumber(2_000, for: initial)
            sum += twoThousandthSecretNumber
        }
    }
    
    func part2(_ secretNumbers: [Int]) -> Int {
        var maximum: Int = .min
        var totalBySequence = [[Int]: Int]()
        
        for initial in secretNumbers {
            var distinctSequences = Set<[Int]>()
            var current = initial
            var differenceSequence = [Int]()
            
            for _ in 0 ..< 1_999 {
                let next = nextSecretNumber(current)
                let currentPrice = current.digits.last!
                let nextPrice = next.digits.last!
                let difference = nextPrice - currentPrice
                differenceSequence.append(difference)
                
                if differenceSequence.count >= 4 {
                    differenceSequence = differenceSequence.suffix(4)
                    
                    let (wasInserted, _) = distinctSequences.insert(differenceSequence)
                    
                    if wasInserted {
                        totalBySequence[differenceSequence, default: 0] += nextPrice
                        maximum = max(maximum, totalBySequence[differenceSequence, default: 0])
                    }
                    
                }
                
                current = next
            }
        }
        
        return maximum
    }
    
    private func nthSecretNumber(_ index: Int, for initial: Int) -> Int {
        var current = initial
        for _ in 0 ..< index {
            let next = nextSecretNumber(current)
            current = next
        }
        
        return current
    }
    
    private func nextSecretNumber(_ secretNumber: Int) -> Int {
        var secretNumber = secretNumber
        
        func mixValue(_ value: Int) -> Int {
            value ^ secretNumber
        }
        
        func prune(_ value: Int) -> Int {
            secretNumber % 16_777_216
        }
        
        secretNumber = mixValue(secretNumber * 64)
        secretNumber = prune(secretNumber)
        
        secretNumber = mixValue(secretNumber / 32)
        secretNumber = prune(secretNumber)
        
        secretNumber = mixValue(secretNumber * 2_048)
        secretNumber = prune(secretNumber)
        
        return secretNumber
    }
}
